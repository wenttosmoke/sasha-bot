import asyncio
import os
import random
import pytz
import json

from datetime import datetime, timedelta
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import FSInputFile
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
API_TOKEN = os.getenv("API_TOKEN")
GROUP_ID = int(os.getenv("GROUP_ID"))
LOGS_ID = int(os.getenv("LOGS_ID"))
STATE_DIR ="json"
STATE_FILE = os.path.join(STATE_DIR, "state.json")
TEXT_FILE = os.path.join(STATE_DIR, "texts.json")
STATE_FOR_MORNING_FILE = os.path.join(STATE_DIR, "state_for_morning.json")

WEBHOOK_HOST = "https://sasha-bot-lwjs.onrender.com"  # üåê –£–∫–∞–∂–∏ —Å–≤–æ–π –¥–æ–º–µ–Ω (https –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!)
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# === –§—É–Ω–∫—Ü–∏—è –≤—ã–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ JSON ===
def json_load():
    
      with open(TEXT_FILE, 'r') as file:
            
            try:
                data = json.load(file)
                bot.send_message(LOGS_ID, text="‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω—ã –∏–∑ JSON ‚úÖ")
                print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω—ã –∏–∑ JSON ‚úÖ", flush=True)
                return data
            except Exception as e:
                bot.send_message(LOGS_ID, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ JSON: {e} ‚ö†Ô∏è")
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ JSON: {e} ‚ö†Ô∏è", flush=True)
                
# === –û–±—ä–µ–∫—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ ===
data = json_load()
sendToSasha = data["sendToSasha"]
morningTexts = data["morningTexts"]
stickerForMorning = data["stickersForMorning"]
currentMessageToSend = {}
currentMorningToSend = {}


# === –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ JSON ===


bot = Bot(token=API_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# === –§—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ –ø–∞–º—è—Ç–∏ ===

async def save_state(data: dict, file):
    try:
        os.makedirs(STATE_DIR, exist_ok=True)
        with open(file, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        await bot.send_message(LOGS_ID, text="‚ùï–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–∞–º—è—Ç—å‚ùï")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}", flush=True)
        await bot.send_message(LOGS_ID, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å: {e}")

async def load_state(file) -> dict:
    try:
        if os.path.exists(file):
            with open(file, "r", encoding="utf-8") as f:
                return json.load(f)
            await bot.send_message(LOGS_ID, text="‚ùï–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –ø–∞–º—è—Ç–∏‚ùï")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø–∞–º—è—Ç–∏: {e}", flush=True)
        await bot.send_message(LOGS_ID, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø–∞–º—è—Ç–∏: {e}")
    return {}

# === –§—É–Ω–∫—Ü–∏–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ç—Ä–∞ ===

def get_time_delta():
    now = datetime.now(pytz.timezone("Europe/Moscow")) 
    print(now)
    # –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å 08:00
    tomorrow_8am = (now + timedelta(days=1)).replace(hour=8, minute=0, second=0, microsecond=0)
    
    # –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É 08:00 –∏ 12:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
    random_minutes = random.randint(0, 4 * 60)  # 4 —á–∞—Å–∞ = 240 –º–∏–Ω—É—Ç
    target_time = tomorrow_8am + timedelta(minutes=random_minutes)
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É
    delta = target_time - now
    
    return (delta.days, delta.seconds // 3600, (delta.seconds % 3600) // 60), target_time

# === –§—É–Ω–∫—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ ===

async def send_random_message():
    is_sent = 0
    total_to_sent = len(currentMessageToSend.keys()) - 1

    try:
        if "song" in currentMessageToSend:
            await bot.send_audio(currentMessageToSend["ID"], FSInputFile(currentMessageToSend["song"]), caption=currentMessageToSend["text"])
            await bot.send_audio(GROUP_ID, FSInputFile(currentMessageToSend["song"]), caption=currentMessageToSend["text"])
            del currentMessageToSend["text"]
            del currentMessageToSend["song"]
            is_sent += 2
    except Exception as e:
        await bot.send_message(LOGS_ID, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–µ—Å–Ω–∏ —Å —Ç–µ–∫—Å—Ç–æ–º: {e} ‚ö†Ô∏è")

    try:
        if "photo" in currentMessageToSend:
                await bot.send_photo(currentMessageToSend["ID"], FSInputFile(currentMessageToSend["photo"]), caption=currentMessageToSend["text"])
                await bot.send_photo(GROUP_ID, FSInputFile(currentMessageToSend["photo"]), caption=currentMessageToSend["text"])
                del currentMessageToSend["text"]
                del currentMessageToSend["photo"]
                is_sent += 2
    except Exception as e:
        await bot.send_message(LOGS_ID, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º: {e} ‚ö†Ô∏è")

    try:    
        if "text" in currentMessageToSend:
                await bot.send_message(currentMessageToSend["ID"], text=currentMessageToSend["text"])
                await bot.send_message(GROUP_ID, text=currentMessageToSend["text"])
                del currentMessageToSend["text"]
                is_sent += 1
    except Exception as e:
        await bot.send_message(LOGS_ID, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞: {e} ‚ö†Ô∏è")

    try:        
        if "sticker" in currentMessageToSend:
                await bot.send_sticker(currentMessageToSend["ID"], sticker=currentMessageToSend["sticker"])
                await bot.send_sticker(GROUP_ID, sticker=currentMessageToSend["sticker"])
                del currentMessageToSend["sticker"]
                is_sent += 1
    except Exception as e:
        await bot.send_message(LOGS_ID, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∏–∫–µ—Ä–∞: {e} ‚ö†Ô∏è")
  
    if is_sent == total_to_sent:
        print(f"‚úÖ [{datetime.now(pytz.timezone("Europe/Moscow"))}] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ", flush=True)
        await bot.send_message(LOGS_ID, text=f"‚úÖ [{datetime.now(pytz.timezone("Europe/Moscow"))}] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ")
        os.remove(STATE_FILE)
    else:
        if is_sent == 0:
            print(f"‚ùå‚ùå‚ùå [{datetime.now(pytz.timezone("Europe/Moscow"))}] –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚ùå‚ùå‚ùå", flush=True)
            await bot.send_message(LOGS_ID, text=f"‚ùå‚ùå‚ùå [{datetime.now()}] –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚ùå‚ùå‚ùå")
        else:
            print(f"‚úÖ‚ö†Ô∏è [{datetime.now(pytz.timezone("Europe/Moscow"))}] –°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –æ—à–∏–±–∫–æ–π ‚úÖ‚ö†Ô∏è", flush=True)
            await bot.send_message(LOGS_ID, text=f"‚úÖ‚ö†Ô∏è [{datetime.now(pytz.timezone("Europe/Moscow"))}] –°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –æ—à–∏–±–∫–æ–π ‚úÖ‚ö†Ô∏è")
            os.remove(STATE_FILE)

    if "song" in currentMessageToSend:
        del currentMessageToSend["song"]        
    if "sticker" in currentMessageToSend:
        del currentMessageToSend["sticker"]
    if "text" in currentMessageToSend:
        del currentMessageToSend["text"]
    if "photo" in currentMessageToSend:
        del currentMessageToSend["photo"]
       
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    await schedule_random_message(currentMessageToSend["ID"])

# === –§—É–Ω–∫—Ü–∏—è —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ ===

async def send_morning_message():
    is_sent = 0
    total_to_sent = len(currentMorningToSend.keys()) - 1

    try:    
        if "text" in currentMorningToSend:
                await bot.send_message(currentMorningToSend["ID"], text=currentMorningToSend["text"])
                await bot.send_message(GROUP_ID, text=currentMorningToSend["text"])
                del currentMorningToSend["text"]
                is_sent += 1
    except Exception as e:
        await bot.send_message(LOGS_ID, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e} ‚ö†Ô∏è")

    try:        
        if "sticker" in currentMorningToSend:
                await bot.send_sticker(currentMorningToSend["ID"], sticker=currentMorningToSend["sticker"])
                await bot.send_sticker(GROUP_ID, sticker=currentMorningToSend["sticker"])
                del currentMorningToSend["sticker"]
                is_sent += 1
    except Exception as e:
        await bot.send_message(LOGS_ID, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∏–∫–µ—Ä–∞ –≤ —É—Ç—Ä–µ–Ω–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏: {e} ‚ö†Ô∏è")
  
    if is_sent == total_to_sent:
        print(f"‚úÖ [{datetime.now(pytz.timezone("Europe/Moscow"))}] –£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ", flush=True)
        await bot.send_message(LOGS_ID, text=f"‚úÖ [{datetime.now(pytz.timezone("Europe/Moscow"))}] –£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ")
        os.remove(STATE_FOR_MORNING_FILE)
    else:
        if is_sent == 0:
            print(f"‚ùå‚ùå‚ùå [{datetime.now(pytz.timezone("Europe/Moscow"))}] –£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚ùå‚ùå‚ùå", flush=True)
            await bot.send_message(LOGS_ID, text=f"‚ùå‚ùå‚ùå [{datetime.now()}] –£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚ùå‚ùå‚ùå")
        else:
            print(f"‚úÖ‚ö†Ô∏è [{datetime.now(pytz.timezone("Europe/Moscow"))}] –£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –æ—à–∏–±–∫–æ–π ‚úÖ‚ö†Ô∏è", flush=True)
            await bot.send_message(LOGS_ID, text=f"‚úÖ‚ö†Ô∏è [{datetime.now(pytz.timezone("Europe/Moscow"))}] –£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –æ—à–∏–±–∫–æ–π ‚úÖ‚ö†Ô∏è")
            os.remove(STATE_FOR_MORNING_FILE)

    if "sticker" in currentMorningToSend:
        del currentMorningToSend["sticker"]
    if "text" in currentMorningToSend:
        del currentMorningToSend["text"]

       
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    await schedule_random_morning_message(currentMorningToSend["ID"])

# === –§—É–Ω–∫—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ===

async def schedule_random_message(ID):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —Å–ª—É—á–∞–π–Ω—É—é –¥–∞—Ç—É/–≤—Ä–µ–º—è"""
    if scheduler.get_jobs("random"):
        scheduler.remove_job("random")  # –æ—á–∏—â–∞–µ–º –ø—Ä–æ—à–ª–æ–µ –∑–∞–¥–∞–Ω–∏–µ
 
    # –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è ‚Äî –æ—Ç 1 —á–∞—Å–∞ –¥–æ 2 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥
    deltaforMessages = timedelta(
        days=0,
        hours=5,
        minutes=2
        # days=random.randint(0, 7),
        # hours=random.randint(0, 23),
        # minutes=random.randint(0, 59)
    )

    run_time = datetime.now(pytz.timezone("Europe/Moscow")) + deltaforMessages
    message = random.choice(list(sendToSasha.keys()))
    text = random.choice(sendToSasha[message]["texts"])
    sendToSasha[message]["texts"].remove(text)

    if message == "withSong":
        try:
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –ø–µ—Å–Ω–µ–π.", flush=True)
            currentMessageToSend["song"] = random.choice(sendToSasha[message]["songs"])
            sendToSasha[message]["songs"].remove(currentMessageToSend["song"])
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–µ—Å–Ω–∏: {e}", flush=True)
            await bot.send_message(LOGS_ID, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–µ—Å–Ω–∏: {e}")
    else:
        if random.choice(sendToSasha[message]["withPhoto"]) == 1:
            try:
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å —Ñ–æ—Ç–æ.", flush=True)   
                currentMessageToSend["photo"] = random.choice(sendToSasha[message]["photos"])
                sendToSasha[message]["photos"].remove(currentMessageToSend["photo"])
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–æ—Ç–æ: {e}", flush=True)
                await bot.send_message(LOGS_ID, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–æ—Ç–æ: {e}")
        if random.choice(sendToSasha[message]["withSticker"]) == 1:
            try:
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ —Å—Ç–∏–∫–µ—Ä–æ–º.", flush=True)
                currentMessageToSend["sticker"] = random.choice(sendToSasha[message]["stickers"])
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç–∏–∫–µ—Ä–∞: {e}", flush=True)
                await bot.send_message(LOGS_ID, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç–∏–∫–µ—Ä–∞: {e}")
    currentMessageToSend["text"] = text
    currentMessageToSend["ID"] = ID
    await bot.send_message(LOGS_ID, text=f"‚ùï\t–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\t‚ùï\n–¢–µ–∫—Å—Ç: {currentMessageToSend["text"]}\n–§–æ—Ç–æ: {currentMessageToSend["photo"] if "photo" in currentMessageToSend else ""}\n–°—Ç–∏–∫–µ—Ä: {currentMessageToSend["sticker"] if "" in currentMessageToSend else ""}\n–ü–µ—Å–Ω—è: {currentMessageToSend["song"] if "song" in currentMessageToSend else ""}")
    scheduler.add_job(send_random_message, "date", run_date=run_time, id="random")
    await save_state({
        "next_message_time": run_time.isoformat(),
        "currentMessageToSend": currentMessageToSend
    }, STATE_FILE)
    print(f"‚ùï –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {run_time} ‚ùï", flush=True)
    await bot.send_message(LOGS_ID, text=f"‚ùï –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {run_time} ‚ùï")

# === –§—É–Ω–∫—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ===

async def schedule_random_morning_message(ID):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —Å–ª—É—á–∞–π–Ω—É—é –¥–∞—Ç—É/–≤—Ä–µ–º—è"""
    if scheduler.get_jobs("morning"):
        scheduler.remove_job("morning")  # –æ—á–∏—â–∞–µ–º –ø—Ä–æ—à–ª–æ–µ –∑–∞–¥–∞–Ω–∏–µ
 
    # –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è ‚Äî –æ—Ç 8 —É—Ç—Ä–∞ –¥–æ 12 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
    deltaforMorningTexts = get_time_delta()
    run_time_for_morning_texts = datetime.now(pytz.timezone("Europe/Moscow")) + deltaforMorningTexts
    print("MORNING", flush=True)
    
    text = random.choice(morningTexts)
    morningTexts.remove(text)
    choosedsticker = random.choice(stickerForMorning)
    print(f"MORNING", flush=True)
    currentMorningToSend["text"] = text
    currentMorningToSend["ID"] = ID
    currentMorningToSend["sticker"] = choosedsticker

    await bot.send_message(LOGS_ID, text=f"‚ùï\t–°–ª–µ–¥—É—é—â–µ–µ —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\t‚ùï\n–¢–µ–∫—Å—Ç: {currentMorningToSend["text"]}\n–°—Ç–∏–∫–µ—Ä: {currentMessageToSend["sticker"] if "" in currentMessageToSend else ""}")
    scheduler.add_job(send_morning_message, "date", run_date=run_time_for_morning_texts, id="morning")
    await save_state({
        "next_message_time": run_time_for_morning_texts.isoformat(),
        "currentMessageToSend": currentMorningToSend
    }, STATE_FOR_MORNING_FILE)
    print(f"‚ùï –°–ª–µ–¥—É—é—â–µ–µ —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {run_time_for_morning_texts} ‚ùï", flush=True)
    await bot.send_message(LOGS_ID, text=f"‚ùï –°–ª–µ–¥—É—é—â–µ–µ —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {run_time_for_morning_texts} ‚ùï")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π ===
@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    scheduler.start()
    
    await message.answer("–Ω—É —á—Ç–æ –∂, –µ—Å–ª–∏ —Ç—ã —ç—Ç–æ —á–∏—Ç–∞–µ—à—å, —Å–∞—à, —Ç–æ —è –≤–ª–∏–ø –≤ –¥–æ–ª–≥–∏.\n–µ–±–∞–Ω—ã–π –±–µ–ª–±–µ—Ç, —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–µ–Ω —Ä–æ–¥–∏–Ω–µ...\n–Ω–æ —á–∞—Å—Ç—å –º–æ–µ–≥–æ —Ä–∞–∑—É–º–∞ –æ—Å—Ç–∞–ª–∞—Å—å –∑–¥–µ—Å—å –∏ –æ–Ω–∞ —Å —Ç–æ–±–æ–π!\n–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç —Ç–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ–± –æ–¥–Ω–æ–π —Ç–≤–∞—Ä–∏, –∫–æ—Ç–æ—Ä–∞—è –¥—Ä–æ—á–∏—Ç –ø–∏—Å—å–∫–∏ –≤ –∞—Ä–º–∏–∏.\n–Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—èüòà")
    await bot.send_message(LOGS_ID, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    await schedule_random_message(int(message.from_user.id))
    await schedule_random_morning_message(int(message.from_user.id))

    


@dp.message()
async def echo_msg(message: types.Message):
    if message.chat.id == message.from_user.id:
        await message.reply("—Ö—ã—Ö, —è –±—ã –æ—Ç–≤–µ—Ç–∏–ª, –Ω–æ —è –¥—Ä–æ—á—É –ø–∏—Å—å–∫–∏(\n–ø—Ä–æ—Å—Ç–∏, —Å–æ–ª–Ω—Ü–µ, —è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–µ—Ä–Ω—É—Å—å!\n–Ω–∞–¥–µ—é—Å—å —É —Ç–µ–±—è –≤—Å—ë —Ö–æ—Ä–æ—à–æ")
        await bot.send_message(GROUP_ID, text="‚ùó‚ùó‚ùó –û–Ω–∞ –æ—Ç–≤–µ—Ç–∏–ª–∞ ‚ùó‚ùó‚ùó")
        await bot.forward_message(
            chat_id=GROUP_ID,          
            from_chat_id=message.chat.id,  
            message_id=message.message_id
        )

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
async def run_http_server(port: int):
    async def handle_root(request):
        return web.Response(text="‚úÖ OK")

    app = web.Application()
    app.add_routes([web.get("/", handle_root)])
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    print(f"‚ùï HTTP server started on 0.0.0.0:{port} ‚ùï", flush=True)
    await bot.send_message(LOGS_ID, text=f"‚ùï HTTP server started on 0.0.0.0:{port} ‚ùï")


# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
async def main():

    # 1) –∑–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π HTTP-—Å–µ—Ä–≤–µ—Ä –Ω–∞ PORT (—á—Ç–æ–±—ã Render —É–≤–∏–¥–µ–ª –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç)
    port = int(os.getenv("PORT", "8080"))
    await run_http_server(port)

    # 2) –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏
    state = await load_state(STATE_FILE)
    if state and "next_message_time" in state:
        try:
            run_time = datetime.fromisoformat(state["next_message_time"])
            now = datetime.now(pytz.timezone("Europe/Moscow"))
            if run_time > now:
                # –ï—Å–ª–∏ –≤—Ä–µ–º—è –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ ‚Äî –ø–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ
                scheduler.add_job(send_random_message, "date", run_date=run_time)
                currentMessageToSend.update(state["currentMessageToSend"])
            else:
                # –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–æ—à–ª–æ ‚Äî —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                currentMessageToSend.update(state["currentMessageToSend"])
                await send_random_message()
            print(f"‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ {run_time}", flush=True)
            await bot.send_message(LOGS_ID, text=f"‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ {run_time}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}", flush=True)
            await bot.send_message(LOGS_ID, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

    state_of_morning_message = await load_state(STATE_FOR_MORNING_FILE)
    if state_of_morning_message and "next_message_time" in state:
        try:
            run_time = datetime.fromisoformat(state_of_morning_message["next_message_time"])
            now = datetime.now(pytz.timezone("Europe/Moscow"))
            if run_time > now:
                # –ï—Å–ª–∏ –≤—Ä–µ–º—è –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ ‚Äî –ø–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ
                scheduler.add_job(send_morning_message, "date", run_date=run_time, id="morning")
                currentMorningToSend.update(state_of_morning_message["currentMorningToSend"])
            else:
                # –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–æ—à–ª–æ ‚Äî —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                currentMorningToSend.update(state["currentMorningToSend"])
                await send_morning_message()
            print(f"‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ {run_time}", flush=True)
            await bot.send_message(LOGS_ID, text=f"‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ {run_time}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}", flush=True)
            await bot.send_message(LOGS_ID, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    # 3) –∑–∞–ø—É—Å–∫–∞–µ–º polling (aiogram)
    # –£–¥–∞–ª—è–µ–º webhook –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª
    await bot.delete_webhook(drop_pending_updates=True)
    print("üöÄ Start polling...", flush=True)
    await bot.send_message(LOGS_ID, text="üöÄ Start polling...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
